{
  "openapi": "3.0.0",
  "info": {
    "title": "S2D Platform, TU API v2",
    "version": "1.0",
    "contact": {
      "name": "Salah Abdullah",
      "email": "s.aldhamdy@s2dsys.com"
    },
    "description": "S2D Platform, Terminal Users API V2.0",
    "license": {
      "name": "Privt",
      "url": "n"
    }
  },
  "servers": [
    {
      "url": "https://tuapi-test.s2d.app",
      "description": "Test"
    },
    {
      "description": "Production",
      "url": "https://tuapi.s2d.app"
    }
  ],
  "paths": {
    "/public/init": {
      "get": {
        "summary": "Global App Inite - endpoint",
        "tags": [
          "init"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/AppProfile"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "rc": "0",
                      "rd": "string",
                      "ca": 0,
                      "rb": {
                        "logo": "string",
                        "primColor": "string",
                        "secnColor": "string",
                        "onesId": "string",
                        "gpn": "string",
                        "msgs": {
                          "about": "string",
                          "signup": "string"
                        },
                        "title": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "operationId": "getAppConfig",
        "description": "Get init app config, like about info, app config data ...etc",
        "parameters": [],
        "security": [
          {
            "Termainl Info": []
          }
        ]
      },
      "parameters": []
    },
    "/auth/login": {
      "parameters": [],
      "post": {
        "summary": "Login - POST endpoint",
        "operationId": "login",
        "responses": {
          "200": {
            "description": "Login Success, if device/browser is trusted for this user, **otp** will be returned in response body, so app must make verfiy login in background.\n\nif **otp** param not found or it's value is 0 or null, app must ask user to enter otp in the verfiy login UI screen.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "description": "Respone inner body",
                      "properties": {
                        "rb": {
                          "type": "object",
                          "description": "response body",
                          "required": [
                            "tid",
                            "sid"
                          ],
                          "properties": {
                            "otp": {
                              "type": "string",
                              "description": "OTP, if login device is trusted for this user server will return OTP in the response insted of SMS, so client will do verfiy login in background.",
                              "example": "123745"
                            },
                            "tid": {
                              "type": "string",
                              "example": "4001299484",
                              "description": "terminal id from server, is the id of device/browser info record in DB"
                            },
                            "sid": {
                              "type": "string",
                              "description": "session id, unique for every session"
                            },
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "mcp": {
                              "type": "boolean",
                              "description": "**must change password/pin**, if it's true app must force user to change password and PIN."
                            }
                          }
                        }
                      },
                      "required": [
                        "rb"
                      ]
                    }
                  ]
                },
                "examples": {
                  "login-resp-trusted-example": {
                    "value": {
                      "rc": "0",
                      "rd": "success",
                      "ca": 0,
                      "rb": {
                        "otp": "123745",
                        "tid": "4001299484",
                        "sid": "134255",
                        "user": {
                          "useCode": 1243,
                          "useMerCode": 1000029,
                          "useFName": "Mohammed Ali Hassn",
                          "useLogin": "777533333",
                          "useIsActive": true,
                          "useLimt": 1500000,
                          "useUsedLmt": 13000,
                          "useIsAdmin": true,
                          "useCrtDate": "2019-10-12 12:32:00",
                          "useCrtUser": "system",
                          "useUpdDate": "2019-10-12 12:32:00",
                          "useUpdUser": "777533333",
                          "useCropName": "Omar Online",
                          "useMerName": "Omar ali sad ali"
                        }
                      }
                    }
                  },
                  "login-resp-not-trusted-example": {
                    "value": {
                      "rc": "0",
                      "rd": "success",
                      "ca": 0,
                      "rb": {
                        "tid": "4001299484",
                        "sid": "134255",
                        "user": {
                          "useCode": 1243,
                          "useMerCode": 1000029,
                          "useFName": "Mohammed Ali Hassn",
                          "useLogin": "777533333",
                          "useIsActive": true,
                          "useLimt": 1500000,
                          "useUsedLmt": 13000,
                          "useIsAdmin": true,
                          "useCrtDate": "2019-10-12 12:32:00",
                          "useCrtUser": "system",
                          "useUpdDate": "2019-10-12 12:32:00",
                          "useUpdUser": "777533333",
                          "useCropName": "Omar Online",
                          "useMerName": "Omar ali sad ali"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, login info is not correct, user/acc locked or device not supported ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                "examples": {
                  "login-resp-failure-example": {
                    "value": {
                      "rc": "32",
                      "rd": "User login name or password not correct",
                      "ca": 0
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "**User login operation API, **\nwhen there is no active session for user, app most requier user to first login to create session.",
        "security": [
          {
            "Termainl Info": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "un": {
                    "type": "string",
                    "description": "merchant user login name."
                  },
                  "up": {
                    "type": "string",
                    "description": "merchant user password.\n* Password must sent encoded with base64."
                  },
                  "tdi": {
                    "$ref": "#/components/schemas/Terminal"
                  }
                },
                "required": [
                  "un",
                  "up",
                  "tdi"
                ]
              },
              "examples": {
                "Login-Request-Body-Example": {
                  "value": {
                    "un": "777690990",
                    "up": "kasdbajskhdhlkajsdhlkJHASDASD=",
                    "tdi": {
                      "uuid": "I:99388378723947823",
                      "mod": "SM-9800",
                      "bra": "Samsung",
                      "osy": "Android",
                      "osv": "19",
                      "lng": "en",
                      "isRooted": true
                    }
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/signup": {
      "parameters": [],
      "post": {
        "summary": "SignUp - endpoint",
        "operationId": "post-signup-sginupRef",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Sign Up API",
        "security": [
          {
            "Termainl Info": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Merchant"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Retrive User/s - GET endpoint",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "operationId": "get-users",
        "description": "Get merchant users list or by get user by login",
        "tags": [
          "User"
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create User - POST endpoint",
        "operationId": "post-users-userLogin",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "$ref": "#/components/responses/Default"
          }
        },
        "description": "Create new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "User data object, all fileds required except (useCode and useUsedLmt)."
        },
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "Update User - PUT endpoint",
        "operationId": "put-users-userLogin",
        "responses": {
          "200": {
            "description": "Request Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Update current user record by userLogin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantUser"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "UnActivate User - DEL endpoint",
        "operationId": "delete-users-userLogin",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Unactivate User .",
        "tags": [
          "User"
        ],
        "parameters": []
      }
    },
    "/auth/vLogin": {
      "post": {
        "summary": "Verify Login - POST endpoint",
        "operationId": "post-auth-verify",
        "responses": {
          "200": {
            "description": "OK, Verification Sucess",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "object",
                          "properties": {
                            "tkn": {
                              "type": "string",
                              "description": "**Authoriaztion Token**, this token is required to be sent in every request from the user current session."
                            },
                            "mcp": {
                              "type": "boolean",
                              "description": "**must change password/pin**, if it's true app must force user to change password and PIN."
                            }
                          },
                          "required": [
                            "tkn"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "OTP or UserLogin or SessionId expired or invalied.\nuser must re-login.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Verify login for new devices/terminal with **OTP** sent to users mobile as SMS.\n\n*when user login from new devices/terminal system sent OTP SMS to their mobile,\nthen user use this OTP to verfiy login operation.*",
        "security": [
          {
            "Termainl Info": []
          },
          {
            "Session Info": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "OTP which sent to user mobile as SMS "
                  },
                  "mode": {
                    "type": "string",
                    "description": "mode of verify, is the request send in background or by user.\nmust be on of :\nEX : sending is done after **otp** SMS recieved \nIM : sending is done in background with **otp** recieved  in login respone"
                  }
                },
                "required": [
                  "otp",
                  "mode"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Authentication"
        ]
      },
      "parameters": []
    },
    "/auth/vPin": {
      "post": {
        "summary": "Verify Trans PIN - POST endpoint",
        "operationId": "post-auth-v-pin",
        "responses": {
          "200": {
            "description": "OK, PIN verification success and PIN is valied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "PIN is not valied, app must logOff the user and delete session data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                "examples": {}
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pin": {
                    "type": "string",
                    "description": "User Trans PIN, which was provided to user after account creation. ",
                    "pattern": "^[0-9]",
                    "minLength": 4,
                    "maxLength": 4
                  }
                },
                "required": [
                  "pin"
                ]
              }
            }
          },
          "description": ""
        },
        "description": "Verify Trans PIN API.",
        "tags": [
          "Authentication"
        ]
      },
      "parameters": []
    },
    "/me/profile/{profileCheckSum}": {
      "get": {
        "summary": "Termainl User Profile - GET endpoint",
        "tags": [
          "profile"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/UserProfile"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "operationId": "get-term-user-profile",
        "description": "Get Terminal user profile"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "profileCheckSum",
          "in": "path",
          "required": true,
          "description": "check-sum for current profile."
        }
      ]
    },
    "/auth/vcResend": {
      "parameters": [],
      "post": {
        "summary": "Verify Code ReSend - endpoint",
        "operationId": "post-auth-vcResend",
        "responses": {
          "200": {
            "description": "OK, Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "un authorized, user must re-login. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Verfiy Code Resend Api",
        "security": [
          {
            "Termainl Info": []
          },
          {
            "Session Info": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/rePass": {
      "post": {
        "summary": "Reset Password - endpoint",
        "operationId": "post-auth-rest-pass",
        "responses": {
          "200": {
            "description": "OK, Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                "examples": {
                  "reset-pass-success-example": {
                    "value": {
                      "rc": "0",
                      "rd": "string",
                      "ca": 0
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error / Failure Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                },
                "examples": {
                  "reset-pass-failure-example": {
                    "value": {
                      "rc": "13",
                      "rd": "Login or Iden not correct",
                      "ca": 0
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Reset user password API.",
        "parameters": [],
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "useLogin": {
                    "type": "string",
                    "description": "User login name"
                  },
                  "useMerIden": {
                    "type": "string",
                    "description": "User Merchant account iden."
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      },
      "parameters": []
    },
    "/auth/chPass": {
      "post": {
        "summary": "Change Password - endpoint",
        "operationId": "post-auth-change-pass",
        "responses": {
          "200": {
            "description": "OK, Success.\nApp must logOff the user and ask user to re-login with the new password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**  ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Change password of user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldpass": {
                    "type": "string"
                  },
                  "newpass": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/chPin": {
      "post": {
        "summary": "Change PIN - endpoint",
        "operationId": "post-auth-change-pin",
        "description": "Change user trans PIN  API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldpin": {
                    "type": "string"
                  },
                  "newpin": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successed, app must delete local PIN hashed data and force user to **re-verfiy pin** from verfiy pin UI screen.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/merchant": {
      "get": {
        "summary": "Get Merchants list - endpoint",
        "tags": [
          "Merchants"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Merchant"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "operationId": "get-mers",
        "description": "Retrive merchant Details or merchants list.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "phrase to filter in merchants by.\nsystem will serach in (name, crop name, addr,..etc)"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ci",
            "description": "city code to filter merchants by"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "st",
            "description": "status to filter merchant by"
          },
          {
            "schema": {
              "type": "number",
              "default": 1
            },
            "in": "query",
            "name": "of",
            "description": "number of page offset",
            "required": true
          },
          {
            "schema": {
              "type": "number",
              "default": 20
            },
            "in": "query",
            "name": "ps",
            "description": "page size to download",
            "required": true
          }
        ]
      },
      "parameters": []
    },
    "/payment": {
      "get": {
        "summary": "Payment - Get endpoint",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PaymentOrder"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-topup",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "df"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dt"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "status"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ope"
          }
        ],
        "tags": [
          "Payment"
        ],
        "description": "Retrive Payment transactions list"
      },
      "parameters": [],
      "post": {
        "summary": "Create Payment Order - endpoint",
        "operationId": "post-payment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Create Service Payment Order",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        }
      }
    },
    "/merchant/{merCode}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "merCode",
          "in": "path",
          "required": true,
          "description": "merchant code"
        }
      ],
      "get": {
        "summary": "Get Merchant Details By Code- endpoint",
        "tags": [
          "Merchants"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/Merchant"
                        }
                      },
                      "required": [
                        "rb"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, token/session is not valid , user must logged off and forced to re-login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "description": "Not Success, **rc** value != **0**",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "operationId": "getMerchantByCode",
        "description": "Get Merchant Details by code"
      }
    },
    "/merchant/create": {
      "post": {
        "summary": "Create Merchant - endpoint",
        "operationId": "post-mer-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/Merchant"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "create new merchant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Merchant"
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Merchants"
        ]
      },
      "parameters": []
    },
    "/merchant/update": {
      "put": {
        "summary": "Update Merchant - endpoint",
        "operationId": "put-mer-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "description": "Update merchant record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Merchant"
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Merchants"
        ]
      },
      "parameters": []
    },
    "/merchant/suspend": {
      "post": {
        "summary": "Suspend Merchant - endpoint",
        "operationId": "post-mer-suspend",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {}
        },
        "description": "Suspend Merchant account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "merCode": {
                    "type": "number",
                    "description": "merchant code to suspend"
                  },
                  "resoan": {
                    "type": "string",
                    "description": "resoan of suspending "
                  }
                },
                "required": [
                  "merCode",
                  "resoan"
                ]
              }
            }
          }
        },
        "tags": [
          "Merchants"
        ]
      },
      "parameters": []
    },
    "/merchant/activate": {
      "post": {
        "summary": "Activate Merchant - endpoint",
        "operationId": "post-mer-activate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": ""
          }
        },
        "description": "Activate Merchant Api",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "merCode": {
                    "type": "integer"
                  },
                  "notes": {
                    "type": "string"
                  }
                },
                "required": [
                  "merCode",
                  "notes"
                ]
              }
            }
          }
        },
        "tags": [
          "Merchants"
        ]
      },
      "parameters": []
    },
    "/public/lovs/{listCode}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "listCode",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get LOVs Data- endpoint",
        "tags": [
          "Public"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "object",
                          "properties": {
                            "lcode": {
                              "type": "string"
                            },
                            "llabel": {
                              "type": "string"
                            },
                            "lnotes": {
                              "type": "string"
                            },
                            "lstatus": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-public-lovs-listCode",
        "description": "Retrive LOVs (list of values) lists data, ex. cities, countries, ...etc",
        "security": [
          {
            "Termainl Info": []
          }
        ]
      }
    },
    "/transafer": {
      "get": {
        "summary": "List Transfare Trans - endpoint",
        "tags": [
          "Transfare"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "$ref": "#/components/schemas/TransfareOrder"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-transafer",
        "description": "fetch transfare orders",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type",
            "description": "by Transfare type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "status",
            "description": "by status"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dr",
            "description": "by debit account"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "cr",
            "description": "by credit account"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "df",
            "description": "date from"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dt",
            "description": "date to"
          }
        ]
      },
      "post": {
        "summary": "Transfare Payment - endpoint",
        "operationId": "post-transafer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "rb": {
                          "type": "object",
                          "properties": {
                            "trx_id": {
                              "type": "string"
                            },
                            "trx_status": {
                              "type": "string"
                            },
                            "trx_date": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransfareOrder"
              }
            }
          },
          "description": ""
        },
        "description": "Create Transfare payment order."
      }
    }
  },
  "components": {
    "responses": {
      "Default": {
        "description": "Response failed, `rc` value `!= 0`. ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          }
        }
      }
    },
    "schemas": {
      "BaseResponse": {
        "title": "BaseResponse",
        "type": "object",
        "description": "API sucess response model.",
        "x-examples": {
          "success-response": {
            "rc": "0",
            "rd": "bla bla balb"
          },
          "suspected-response": {
            "rc": "-200",
            "rd": "العملية قيد التاكيد، يرجى التحقق من حاله العمليه بعد عده ثواني",
            "ca": 3000
          },
          "repeted-response": {
            "rc": "-300",
            "rd": "string",
            "ca": 0
          },
          "failuer-response": {
            "rc": "18",
            "rd": "هذا الصنف غير مفعل",
            "ca": 0
          }
        },
        "properties": {
          "rc": {
            "type": "string",
            "enum": [
              "0",
              "30-39",
              "-100",
              "-200",
              "117",
              "60-69"
            ],
            "description": "Response code, **0 means success**, other see artical [Respons Codes]"
          },
          "rd": {
            "type": "string",
            "description": "Response description"
          },
          "ca": {
            "type": "number",
            "description": "Control action, sent from server to be executed on terminal."
          },
          "trx": {
            "type": "string",
            "description": "Transaction code from the system.\n\n_usualy returned in payments/transfare/sales requests only_"
          }
        },
        "required": [
          "rc",
          "rd"
        ]
      },
      "User": {
        "title": "User",
        "type": "object",
        "description": "API merchant user Model",
        "x-tags": [
          "User",
          "response"
        ],
        "x-examples": {
          "Merchant-User-Example": {
            "useCode": 1243,
            "useMerCode": 1000029,
            "useFName": "Mohammed Ali Hassn",
            "useLogin": "777533333",
            "useIsActive": true,
            "useLimt": 1500000,
            "useUsedLmt": 13000,
            "useIsAdmin": true,
            "useCrtDate": "2019-10-12 12:32:00",
            "useCrtUser": "system",
            "useUpdDate": "2019-10-12 12:32:00",
            "useUpdUser": "777533333",
            "useCropName": "Omar Online",
            "useMerName": "Omar ali sad ali",
            "UseMerIden": "9002299201"
          }
        },
        "properties": {
          "useCode": {
            "type": "number",
            "description": "User Code (aka id)\n"
          },
          "useFName": {
            "type": "string",
            "description": "User full name"
          },
          "useLogin": {
            "type": "string",
            "description": "User login name (aka userName)\n"
          },
          "useIsActive": {
            "type": "boolean",
            "description": "User active status"
          },
          "useLimt": {
            "type": "number",
            "description": "Allowed amount to use from merchant balance"
          },
          "useUsedLmt": {
            "description": "used limit amount ",
            "type": "number"
          },
          "useIsAdmin": {
            "type": "boolean",
            "description": "Is user the admin of the merchant account.\n\n@admin user can manage other account users.@"
          },
          "useCrtDate": {
            "type": "string",
            "description": "created at"
          },
          "useCrtUser": {
            "type": "string",
            "description": "created by."
          },
          "useUpdDate": {
            "type": "string",
            "description": "updated at."
          },
          "useUpdUser": {
            "type": "string",
            "description": "updated by."
          },
          "useMerCode": {
            "type": "integer",
            "description": "merchant code who own this user"
          },
          "useCropName": {
            "type": "string",
            "description": "Merchant Crop. Name"
          },
          "useMerName": {
            "type": "string",
            "description": "Merchant owner name"
          },
          "UseMerIden": {
            "type": "string",
            "description": "Merchant Account Iden (it is also called wallet id)"
          }
        },
        "required": [
          "useFName",
          "useLogin",
          "useIsActive",
          "useLimt",
          "useIsAdmin",
          "useMerCode",
          "UseMerIden"
        ]
      },
      "Merchant": {
        "title": "Merchant",
        "type": "object",
        "description": "Api Merchant Account Model",
        "x-examples": {
          "for-response": {
            "merCode": 1023,
            "merIden": "9103000010",
            "merName": "سالم علي الصباج",
            "merCName": "المجد تيك",
            "merPhone1": "777690990",
            "merPhone2": "778555521",
            "merGrp": "عملاء الجنوب",
            "merStatus": "فعال",
            "merCity": "امانه العاصمة",
            "merBal": 523330,
            "merStDate": "2020-01-01",
            "merDla": 3
          },
          "for-create-request": {
            "merName": "سالم علي الصباج",
            "merCName": "المجد تيك",
            "merPhone1": "777690990",
            "merPhone2": "778555521",
            "merGrp": "عملاء الجنوب",
            "merStatus": "فعال",
            "merCity": "امانه العاصمة",
            "merBal": 523330,
            "merStDate": "2020-01-01",
            "merDla": 2
          }
        },
        "properties": {
          "merCode": {
            "type": "number"
          },
          "merIden": {
            "type": "string",
            "description": "Merchant Iden."
          },
          "merName": {
            "type": "string",
            "description": "Merchant full name."
          },
          "merCorpName": {
            "type": "string",
            "description": "Merchant corp. name"
          },
          "merPhone1": {
            "type": "string",
            "description": "Merchant primary mobile phone no.",
            "pattern": "^[0-9]",
            "minLength": 9,
            "maxLength": 15
          },
          "merPhone2": {
            "type": "string",
            "description": "Merchant secondry mobile phone no."
          },
          "merGrpCode": {
            "type": "string",
            "description": "Merchant group"
          },
          "merStatus": {
            "type": "integer",
            "description": "Merchant account status (active / inactive)"
          },
          "merCitCode": {
            "type": "integer",
            "description": "Merchant city."
          },
          "merBal": {
            "type": "number",
            "description": "Merchant current balance"
          },
          "merStartDate": {
            "type": "string",
            "description": "Merchant account start date"
          },
          "merDlaCode": {
            "type": "integer",
            "description": "Merchant Distrabution layer (level of privilages)",
            "enum": [
              1,
              2,
              3,
              4,
              0
            ],
            "example": 3,
            "minimum": 0,
            "maximum": 4,
            "format": "int32"
          },
          "merCouCode": {
            "type": "string",
            "description": "country"
          },
          "merDisCode": {
            "type": "string"
          },
          "merAddress1": {
            "type": "string"
          }
        },
        "required": [
          "merName",
          "merCorpName",
          "merPhone1",
          "merPhone2",
          "merCitCode",
          "merDlaCode",
          "merCouCode",
          "merDisCode",
          "merAddress1"
        ]
      },
      "Terminal": {
        "title": "Terminal",
        "type": "object",
        "description": "API Device/Browser terminal Info Model",
        "properties": {
          "uuid": {
            "type": "string",
            "minLength": 6,
            "maxLength": 64,
            "description": "Terminal Device SerialNo/IMEI or Browser UUID. \nit must begin with prefix:\nif uuid > U:<uuid>\nif seril> S:<serialNo>\nif IMEI > I:<imei>",
            "pattern": "^([I,U,S]:[A-Z a-z 0-9])",
            "format": "uuid"
          },
          "mod": {
            "type": "string",
            "description": "Terminal Device  Model."
          },
          "bra": {
            "type": "string",
            "description": "Terminal Device Brand."
          },
          "osy": {
            "type": "string",
            "description": "Terminal Device Operating System."
          },
          "osv": {
            "type": "string",
            "description": "Terminal Device OS version."
          },
          "lng": {
            "type": "string",
            "description": "Termminal device language."
          },
          "isRooted": {
            "type": "boolean",
            "description": "Is device rooted/jilyBreaked"
          }
        },
        "required": [
          "uuid",
          "mod",
          "bra",
          "osy",
          "osv",
          "lng",
          "isRooted"
        ],
        "x-examples": {
          "Android-Mobile-Terminal-example": {
            "uuid": "U:095be615-a8ad-4c33-8e9c-c7612fbf6c9f",
            "mod": "SM-560",
            "bra": "Samsung",
            "osy": "Android",
            "osv": "4.4",
            "lng": "en",
            "isRooted": true
          }
        }
      },
      "AppProfile": {
        "description": "App profile model",
        "type": "object",
        "title": "",
        "properties": {
          "title": {
            "type": "string",
            "description": "App Title "
          },
          "logo": {
            "type": "string",
            "description": "app logo file name (not used in this time)"
          },
          "primColor": {
            "type": "string",
            "description": "App Primary Color"
          },
          "secnColor": {
            "type": "string",
            "description": "App Secondry Color"
          },
          "onesId": {
            "type": "string",
            "description": "App Onesignal APP ID"
          },
          "gpn": {
            "type": "string",
            "description": "App Google Project No"
          },
          "msgs": {
            "type": "object",
            "description": "App local messages text",
            "required": [
              "about",
              "signup"
            ],
            "properties": {
              "about": {
                "type": "string",
                "description": "About App message content (as HTML)"
              },
              "signup": {
                "type": "string",
                "description": "Signup Submit Message"
              }
            }
          }
        },
        "required": [
          "title",
          "logo",
          "primColor",
          "secnColor",
          "onesId",
          "gpn",
          "msgs"
        ]
      },
      "UserProfile": {
        "title": "UserProfile",
        "type": "object",
        "description": "User Merchant Profile model",
        "properties": {
          "srv": {
            "type": "array",
            "description": "Profile allowed services for sale",
            "items": {
              "$ref": "#/components/schemas/Operator"
            }
          },
          "tco": {
            "type": "array",
            "description": "profile allowed transaction ",
            "items": {
              "$ref": "#/components/schemas/TransactionCode"
            }
          },
          "acc": {
            "$ref": "#/components/schemas/Merchant"
          },
          "chkSum": {
            "type": "string",
            "description": "hashed string must sent with any (get profile) request"
          }
        },
        "required": [
          "srv",
          "tco",
          "chkSum",
          "acc"
        ]
      },
      "Operator": {
        "title": "Operator",
        "type": "object",
        "description": "",
        "properties": {
          "opeCode": {
            "type": "integer",
            "description": "Operator code ex. (42101)"
          },
          "opeName": {
            "type": "string",
            "description": "Operator name ex. (Sabafon)"
          },
          "opeCat": {
            "type": "string",
            "description": "Operator cat"
          },
          "opeItems": {
            "type": "array",
            "description": "Operator Items object array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "opeColor": {
            "type": "string",
            "description": " operator display  color"
          },
          "opeLogo": {
            "type": "string",
            "description": "operator logo path"
          },
          "opeSubRegex": {
            "type": "string",
            "description": "operator subscribers id pattern regex",
            "example": "^[77]([0-9]{7})"
          }
        },
        "required": [
          "opeCode",
          "opeName",
          "opeCat",
          "opeItems",
          "opeColor",
          "opeLogo",
          "opeSubRegex"
        ]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "iteCode": {
            "description": "item code",
            "type": "integer"
          },
          "iteName": {
            "type": "string",
            "description": "item name"
          },
          "iteDesc": {
            "type": "string",
            "description": "item description"
          },
          "iteIsOpen": {
            "description": "item is support open amount.\nif **true** then user can enter any amount.\nif **false** then user must select one of item bundels (`den`).",
            "type": "boolean"
          },
          "iteCost": {
            "type": "string",
            "description": "item unit cost.\n`when calc tran cost, app must multiply `**iteCost**` * `**amount** ."
          },
          "iteMinAmt": {
            "description": "item min allowd amount",
            "type": "number"
          },
          "iteMamAmt": {
            "description": "item max allowed amo",
            "type": "number"
          },
          "iteStyCode": {
            "description": "item **service type**, it's the system gloabl type which identify the required operation to deal with items with this type.",
            "enum": [
              "9001",
              "9002",
              "9003",
              "9004",
              "9005",
              "9006",
              "9007",
              "9008",
              "9009",
              "9010"
            ],
            "type": "number"
          },
          "iteDens": {
            "type": "array",
            "description": "item denomitions (bundles)",
            "items": {
              "$ref": "#/components/schemas/Denom"
            }
          },
          "itePrice": {
            "type": "number",
            "description": "item sale price/unit, this the price POS must take from consumer."
          }
        },
        "required": [
          "iteCode",
          "iteName",
          "iteDesc",
          "iteIsOpen",
          "iteCost",
          "iteMinAmt",
          "iteMamAmt",
          "iteStyCode"
        ],
        "description": "",
        "x-tags": [
          "profile"
        ]
      },
      "Denom": {
        "title": "Denom",
        "type": "object",
        "properties": {
          "denCode": {
            "description": "den code",
            "type": "number"
          },
          "denId": {
            "type": "string",
            "description": "Denom Iden, used to display for user in toppup payment only"
          },
          "denName": {
            "type": "string",
            "description": "den name"
          },
          "denCost": {
            "description": "den `cost`",
            "type": "number"
          },
          "denUnit": {
            "type": "string",
            "description": "den unit desc ex.(ريال , وحده, pcs ...etc)"
          },
          "denPrice": {
            "type": "number",
            "description": "den sale price, this the price POS must take from consumer."
          },
          "denDesc": {
            "type": "string",
            "description": "den description"
          }
        },
        "required": [
          "denCode",
          "denId",
          "denName",
          "denCost",
          "denUnit",
          "denPrice",
          "denDesc"
        ],
        "x-tags": [
          "profile"
        ]
      },
      "TransactionCode": {
        "title": "TransactionCode",
        "type": "object",
        "properties": {
          "tcoCode": {
            "type": "integer",
            "description": "tran code ex.(7100)"
          },
          "tcoName": {
            "type": "string",
            "description": "tran name"
          },
          "tcoIsFin": {
            "description": "tran is financial transaction",
            "type": "boolean"
          }
        },
        "required": [
          "tcoCode",
          "tcoIsFin"
        ],
        "x-tags": [
          "profile"
        ]
      },
      "PaymentRequest": {
        "title": "Payment Request",
        "type": "object",
        "description": "Payment request Model",
        "x-tags": [
          "Payment"
        ],
        "x-examples": {
          "topup-payment-example": {
            "tco": 7100,
            "ref": "231231",
            "order": {
              "itm": 11,
              "amt": 1200,
              "cst": 1200
            },
            "recip": {
              "id": "777690990"
            },
            "rem": "سداد يمن موبايل",
            "acc": "991000022"
          },
          "offer-payment-example": {
            "tco": 7200,
            "ref": "788823",
            "order": {
              "itm": 13,
              "den": 73103,
              "amt": 410,
              "cst": 482,
              "sub_act": "n"
            },
            "recip": {
              "id": "733333333",
              "ty": "1"
            },
            "rem": "سداد باقه سمارت نت MTN",
            "acc": "99013333333"
          }
        },
        "properties": {
          "tco": {
            "type": "number",
            "description": "Tran Code, type of payment transaction.\n\n_get it from profile>> tco>> tco_code_",
            "enum": [
              7100,
              7200,
              7500,
              7600
            ]
          },
          "ref": {
            "type": "string",
            "description": "Tran Reference, is the reference sent from the client system for tracking porpuse.\n\n_`ref` must be unique for every request_"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "recip": {
            "type": "object",
            "description": "Receipent info",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "**Payment receipent**, the ID/Code/No of the receipent/subscriber to credited/send with amount or bundel. "
              },
              "ty": {
                "type": "string",
                "description": "**Receipent account type**, the receipent account type code.\n\n_mostly used with mobile telcom payments_"
              },
              "nm": {
                "type": "string",
                "description": "**Receipent Name**, the receipent/customer name to be saved in the transaction record for reference only."
              }
            }
          },
          "extra_info": {
            "type": "object",
            "description": "Extra data sent from user for tran refrences only.",
            "properties": {
              "sp": {
                "type": "number",
                "description": "**Sales price**, the amount that was taken from the customer."
              },
              "pm": {
                "type": "string",
                "description": "**Payment method**, method of payment used in this tran ex. cash, remittence, bank tran ...etc."
              },
              "ref": {
                "type": "string",
                "description": "**Reference**, extra reference .\n\n_Most of the times it is used to record voucher number_"
              }
            }
          },
          "rem": {
            "type": "string",
            "description": "**Tran Remarks**"
          },
          "acc": {
            "type": "string",
            "description": "**Tran Account**, merchant account iden whic will be debited for the payment cost."
          }
        },
        "required": [
          "tco",
          "ref",
          "order",
          "recip",
          "acc"
        ]
      },
      "TransfareRequest": {
        "description": "",
        "type": "object",
        "title": "Transfare Request",
        "x-examples": {
          "transfare-example": {
            "tco": 7700,
            "ref": "234234234",
            "amt": 100000,
            "cur": "YER",
            "typ": 1001,
            "fee": 100,
            "cst": 100100,
            "recip": {
              "id": "string",
              "nm": "string"
            },
            "rem": "string",
            "acc": "string",
            "extra_info": {
              "ref": "string",
              "notes": "string"
            }
          }
        },
        "properties": {
          "tco": {
            "type": "number",
            "description": "Tran Code, type of payment transaction.\n\n_get it from profile>> tco>> tco_code_",
            "enum": [
              7100,
              7200,
              7500,
              7600
            ]
          },
          "ref": {
            "type": "string",
            "description": "Tran Reference, is the reference sent from the client system for tracking porpuse.\n\n_`ref` must be unique for every request_"
          },
          "amt": {
            "type": "number",
            "description": "**Tranfare amount**, the fund amount to be transfared ."
          },
          "cur": {
            "type": "string",
            "minLength": 1,
            "description": "**Amount Currency**, the amount currency"
          },
          "typ": {
            "description": "**Tran Type**, the trans type code.",
            "type": "string"
          },
          "fee": {
            "type": "number",
            "description": "**Fee**, the fees amount applied for this trans and will be debited from tran account."
          },
          "cst": {
            "type": "number",
            "description": "**Trans cost**, the total amount that will be debited from tran account.\n\n**Cost (cst)** is calculated as following :\n```\nCost = (amt x exchange_rate) + fee\n```"
          },
          "recip": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1,
                "description": "**Receipent Id**, receipent account id which will be credited with the amount."
              },
              "nm": {
                "type": "string"
              }
            }
          },
          "rem": {
            "type": "string",
            "description": "**Tran Remarks**, any remarks or notes"
          },
          "acc": {
            "type": "string",
            "description": "**Tran Account**, merchant account iden whic will be debited for the payment cost."
          },
          "extra_info": {
            "type": "object",
            "properties": {
              "ref": {
                "type": "string",
                "description": "**Reference**, extra reference .\n\n_Most of the times it is used to record voucher number_"
              },
              "notes": {
                "type": "string",
                "description": "**Extra notes**, ...."
              }
            }
          }
        },
        "required": [
          "tco",
          "ref",
          "amt",
          "cst",
          "recip",
          "acc"
        ]
      },
      "Order": {
        "description": "Payment order model used with requests / responses",
        "type": "object",
        "properties": {
          "itm": {
            "type": "number",
            "description": "Order Item, the item/product/services code selected."
          },
          "den": {
            "type": "number",
            "description": "Order Denomantion, the class/bundel/offer code of selected item in case of `item` is not't supporting open amount."
          },
          "amt": {
            "type": "number",
            "description": "Order amount, the amount to be credited to the receipent account.",
            "format": "double",
            "example": 1200
          },
          "cur": {
            "type": "string",
            "description": "Order amount currency, the currency of payment.",
            "minLength": 3,
            "maxLength": 3,
            "enum": [
              "YER",
              "USD",
              "ERU",
              "ADE",
              "SRY"
            ]
          },
          "cst": {
            "type": "number",
            "description": "Order cost, the total amount that will be debited from account.\n\n**Cost (cst)** is calculated as following :\n```\n#### Open Amount:\n Cost = (amt x item_cost x exchange_rate) + fee\n#### Closed Amount\nCost = (item_cost x den_cost x exchange_rate)  + fee\n### Card / E-Voucher Item:\nCost = (item_cost x den_cost x qty x exchange_rate)  + fee\n```"
          },
          "qty": {
            "type": "number",
            "description": "Order quentity, used only in case of e-voucher items or cards items",
            "default": 1,
            "minimum": 1,
            "exclusiveMinimum": false
          },
          "sub_act": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "n",
              "r",
              "d"
            ],
            "description": "Order Sub Action, the action requied to be executed with payment.\n\n_in this time it used only with **Yemen Mobile** offers_"
          }
        },
        "required": [
          "itm",
          "amt",
          "cst"
        ],
        "title": "Payment Order Model",
        "x-examples": {
          "payment-order-example": {
            "itm": 12,
            "den": 48,
            "amt": 1200,
            "cur": "YER",
            "cst": 1200,
            "qty": 1,
            "sub_act": "n"
          }
        },
        "x-tags": [
          "Payment"
        ]
      }
    },
    "securitySchemes": {
      "Auth. Token": {
        "type": "apiKey",
        "in": "header",
        "name": "auth-token",
        "description": "Token: this is authorizaion token returned after success verified login to app."
      },
      "Termainl Info": {
        "name": "term-info",
        "type": "apiKey",
        "in": "header",
        "description": "must sent with every request and will contian app uniqe info (appId +':'+ appVersion +':'+ termType).\n\nappId: is a value hardcoded in code .\nappVersion: is the apk/package version.\ntermType: is value hardcoded and it's one of these :\n  100, 110, 120"
      },
      "Session Info": {
        "name": "sess-info",
        "type": "apiKey",
        "in": "header",
        "description": "Used to send session info which is a string consist of  (UserLoginName + ':' + TermId)\n\nTermId: is the terminal id from the server and it's returned after success login."
      }
    }
  },
  "security": [
    {
      "Auth. Token": []
    },
    {
      "Termainl Info": []
    },
    {
      "Session Info": []
    }
  ],
  "tags": [
    {
      "name": "init"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Merchants"
    },
    {
      "name": "User"
    },
    {
      "name": "profile"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Public"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Transfare"
    }
  ]
}